class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    queue<pair<int,int>> q;
	    int m=grid.size();
	    int n=grid[0].size();
	    vector<vector<int>> ans(m,vector<int>(n,0));
	    for(int i=0;i<m;i++)
	    {
	        for(int j=0;j<n;j++)
	        {
	            if(grid[i][j]==1)
	            {
	                q.push({i,j});
	                grid[i][j]=0;
	            }
	            else
	            {
	                ans[i][j]=-1;
	                //grid[i][j]=-1;
	            }
	        }
	    }
	    
	    vector<int> dirx={0,1,0,-1};
	    vector<int> diry={1,0,-1,0};
	    
	    
	    while(!q.empty())
	    {
	        int size=q.size();
	        for(int s=0;s<size;s++)
	        {
	            int x=q.front().first;
	            int y=q.front().second;
	            q.pop();
	            for(int i=0;i<4;i++)
	            {
	                int nx=x+dirx[i];
	                int ny=y+diry[i];
	                if(isInvalid(nx,ny,m,n)) continue;
	                //cout<<nx<<" "<<ny<<endl;
	                if(ans[nx][ny]==-1)
	                {
	                    ans[nx][ny]=ans[x][y]+1;
	                    q.push({nx,ny});
	                }
	            }
	           
	        }
	    }
	    
	   
	    return ans;
	}
	
	bool isInvalid(int i,int j,int m,int n )
	{
	    if(i<0 || j<0 || i>=m || j>=n )
	    return true;
	    return false;
	}
};
