class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
    map<int,map<int,vector<int>>> mp;
    queue<pair<TreeNode*,pair<int,int>>> q;
    q.push(make_pair(root,make_pair(0,0)));
    while(!q.empty())
    {
        pair<TreeNode*,pair<int,int>> front=q.front();
        q.pop();
        TreeNode* frontNode=front.first;
        int hd=front.second.first;
        int lvl=front.second.second;
        mp[hd][lvl].push_back(frontNode->val);
        if(frontNode->left)
        {
            q.push(make_pair(frontNode->left,make_pair(hd-1,lvl+1)));
        }
        if(frontNode->right)
        {
            q.push(make_pair(frontNode->right,make_pair(hd+1,lvl+1)));
        }
    }
        vector<vector<int>> ans;
    for(auto i:mp)
    {
        vector<int> temp;
        for(auto j:i.second)
        {
            sort(j.second.begin(), j.second.end());
            for(auto k:j.second)
            {
               temp.push_back(k); 
            }
        }
          ans.push_back(temp);
    }
        return ans;
    }
};
