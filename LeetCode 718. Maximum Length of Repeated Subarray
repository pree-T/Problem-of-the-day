MEMOIZATION
class Solution {
public:
    int ans=0;
    int f(int i,int j,vector<int>&nums1,vector<int>&nums2,vector<vector<int>>&dp){
        if(i>=nums1.size() || j>=nums2.size()){
            return 0;
        }
        if(dp[i][j]!=-1)return dp[i][j];
        int length=0;
        if(nums1[i]==nums2[j]){
            length=1+f(i+1,j+1,nums1,nums2,dp);
             ans=max(ans,length);
        }
       f(i+1,j,nums1,nums2,dp),f(i,j+1,nums1,nums2,dp);
        dp[i][j]=length;
       return length;
        
    }
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        vector<vector<int>>dp(nums1.size()+1,vector<int>(nums2.size()+1,-1));
         f(0,0,nums1,nums2,dp);
        return ans;
    }
};
TABULATION
int findLength(vector<int>& nums1, vector<int>& nums2) {
        vector<vector<int>>dp(nums1.size()+1,vector<int>(nums2.size()+1,0));
        
        int ans=0;
        for(int i=1;i<=nums1.size();i++){
            for(int j=1;j<=nums2.size();j++){
                  if(nums1[i-1]==nums2[j-1]){
            dp[i][j]=1+dp[i-1][j-1];
             ans=max(ans,dp[i][j]);
        }
      
            }
        }
        return ans;
    }
