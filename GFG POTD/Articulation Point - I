class Solution {
  public:
    vector<int> articulationPoints(int v, vector<int>adj[]) {
        vector<int> ans;
        vector<int> vis(v,0);
        vector<int> tin(v,-1);
        vector<int> low(v,-1);
        vector<int> art(v,0);
        int timer=0;
        for(int i=0;i<v;i++)
        {
            if(!vis[i])
            {
                dfs(i,-1,vis,adj,tin,low,timer,art);
            }
        }
        
        for(int i=0;i<v;i++)
        {
            if(art[i]==1)
            ans.push_back(i);
        }
        if(ans.size()==0)
        ans.push_back(-1);
        
        return ans;
    }
    
    void dfs(int src,int p,vector<int> &vis,vector<int> adj[],vector<int> &tin,vector<int> &low,int &timer,vector<int> &art)
    {
        vis[src]=1;
        low[src]=tin[src]=timer++;
        int child=0;
        for(auto it:adj[src])
        {
            if(it==p) continue;
            if(!vis[it])
            {
                dfs(it,src,vis,adj,tin,low,timer,art);
                low[src]=min(low[src],low[it]);
                child++;
                if(low[it]>=tin[src] && p!=-1)
                {
                    art[src]=1;
                }
            }
            else
            {
                low[src]=min(low[src],tin[it]);
            }
        }
        if(p==-1 && child>1)
        art[src]=1;
    }
};
