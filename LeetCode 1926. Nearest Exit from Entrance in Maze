class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& e) {
        int m=maze.size();
        int n=maze[0].size();
        vector<vector<int>> vis(m,vector<int>(n,0));
        queue<pair<int,int>> q;
        q.push({e[0],e[1]});
        vis[e[0]][e[1]]=1;
        int level=1;
        int dirx[]={1,-1,0,0};
        int diry[]={0,0,1,-1};
        while(!q.empty())
        {
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                int x=q.front().first;
                int y=q.front().second;
                q.pop();
                for(int d=0;d<4;d++)
                {
                    int nx=x+dirx[d];
                    int ny=y+diry[d];
                    if(isInvalid(nx,ny,m,n,maze,vis)) continue;
                    if(nx==0 || ny ==0 || nx==m-1 || ny ==n-1) return level;
                    vis[nx][ny]=1;
                    q.push({nx,ny});
                }
                
            }
            ++level;
        }
        
      return -1;  
        
    }
    
    bool isInvalid(int i,int j,int m,int n,vector<vector<char>> &maze,vector<vector<int>> &vis)
    {
        if(i>=m || j>=n || i<0 || j< 0 || maze[i][j]=='+'|| vis[i][j]==1)
            return true;
        else
            return false;
    }
};
