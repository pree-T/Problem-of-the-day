//Solution 1  using sets (O(N) space complexity)

long long numberOfSubsequences(int N, long long A[]){
        unordered_set<long long int> val;
        long long int i=0;
        int mod=1e9+7;
        while(i<=1e9)
        {
            val.insert(i);
            i=i*2;
        }
      long long ans=0;
        
        for(int j=0;j<N;j++)
        {
            if(val.find(A[j])!=val.end())
            {
                ans += (ans + 1)%mod;
                ans %= mod;
            }
            
        }
        return ans;
        
        
    }
    
    
    //Using constant space
    
    long long mod = 1e9 + 7;
        long long ans = 0;
        for(int i = 0; i < N; i++){
            if((A[i] & A[i] - 1) == 0){
                ans += (ans + 1)%mod;
                ans %= mod;
            }
        }
        return ans;
