class Solution {
public:
    int concatenatedBinary(int n) {
          long ans = 0, mod = 1e9+7, length = 0;
        for (int i = 1; i <= n; ++i) {
            
            if ((i & (i - 1)) == 0) length++;
            ans = ((ans << length) + i) % mod;
        }
        return ans;
        
    }
};


Countbits function returns the number of bits in the number n
Let's understand this with an example,

We will take the example of a decimal number(base 10).
If we take log10(n)+1 it will return the number of digits in the base 10.

For example,

log10(121)+1 = 3
log10(87)+1 = 2
log10(2)+1 = 1

Now, the same goes for a log base 2 in a binary system.
log2(5)+1 = 3
log2(3)+1 = 2
log2(1)+1 = 2

Once we have the number of bits, we can continue ahead

we just left shift our temp variable by the number of bits in ith number
then we xor temp with i
For example,

temp=0;
n=2;
i->1 to 2;
For i=1,
(temp<<1)^i -> (0<<1)^1 -> (00)^01 -> 01
temp = 01

next ,

For i=2,
(temp<<2)^i -> (01<<2)^2 -> (0100)^10 -> 0110
temp = 110 -> 6
so 6 will be the answer in this way
