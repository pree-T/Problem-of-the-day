class Solution{
public:	
	string addBinary(string a, string b)
	{
	    string ans="";
	    int carry=0;
	    
	    int len1=a.size();
	    int len2=b.size();
	    int i=len1-1;
	    int j=len2-1;
	    
	    while(i>=0 && j>=0)
	    {
	        //cout<<"adding "<<a[i]<<" "<<b[j]<<" with carry "<<carry<<endl;
	        if(a[i]=='1' && b[j]=='1' && carry==1 )
	        {
	            //cout<<"coming1"<<endl;
	            ans.push_back('1');
	            carry=1;
	        }
	        else if((a[i]=='1' && b[j]=='0' && carry==1) || (a[i]=='0' && b[j]=='1' && carry==1) ||
	        (a[i]=='1' && b[j]=='1' && carry==0))
	        {
	            //cout<<"coming2"<<endl;
	            ans.push_back('0');
	            carry=1;
	        }
	        else if((a[i]=='0' && b[j]=='0' && carry==1) || 
	        (a[i]=='1' && b[j]=='0' && carry==0) || (a[i]=='0' && b[j]=='1' && carry==0))
	        {
	            //cout<<"coming3"<<endl;
	            ans.push_back('1');
	            carry=0;
	        }
	        else
	        {
	            //cout<<"coming4"<<endl;
	            ans.push_back('0');
	            carry=0;
	        }
	        i--;
	        j--;
	    }
	    
	    
	    while(i>=0)
	    {
	         //cout<<"adding "<<a[i]<<" with carry "<<carry<<endl;
	        if(a[i]=='1' && carry==1)
	        {
	            ans.push_back('0');
	            carry=1;
	        }
	        else if((a[i]=='1' && carry==0) || (a[i]=='0' && carry==1))
	        {
	            ans.push_back('1');
	            carry=0;
	        }
	        else
	        {
	            ans.push_back('0');
	            carry=0;
	        }
	        i--;
	        
	    }
	   
	    
	    while(j>=0)
	    {
	        //cout<<"here"<<endl;
	        if(b[j]=='1' && carry==1)
	        {
	            ans.push_back('0');
	            carry=1;
	        }
	        else if((b[j]=='1' && carry==0) || (b[j]=='0' && carry==1))
	        {
	            ans.push_back('1');
	            carry=0;
	        }
	        else
	        {
	            ans.push_back('0');
	            carry=0;
	        }
	        j--;
	        
	    }
	    
	    if(carry==1)
	    ans.push_back('1');
	    //cout<<ans<<endl;
	    int size=ans.size();
	    int p=size;
	    int count=0;
	    while(size>0 && ans[size-1]=='0')
	    {
	      ++count;
	      --size;
	    }
	    ans=ans.substr(0,p-count);
	   reverse(ans.begin(),ans.end());
	    
	    return ans;
	}
};
