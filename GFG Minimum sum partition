class Solution{
     vector<bool> val;

  public:
	int minDifference(int arr[], int n)  { 
	     int sum,temp;int min=INT_MAX;sum=0;
	    for(int i=0;i<n;i++)
	    {
	        sum=sum+arr[i];
	    }
	    isSubsetSum(arr,n,sum);
	    for(int i=0;i<=sum/2;i++)
	    {
	        if(val[i])
	        {
	            temp=sum-2*i;
	            if(temp<min)
	            min=temp;
	        }
	    }
	    return min;
	} 
	void isSubsetSum(int set[], int n, int sum)
{
    
       bool subset[n + 1][sum + 1];
    for (int i = 0; i <= n; i++)
        subset[i][0] = true;
 
    // If sum is not 0 and set is empty,
    // then answer is false
    for (int i = 1; i <= sum; i++)
        subset[0][i] = false;
 
    // Fill the subset table in botton up manner
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= sum; j++) {
            if (j < set[i - 1])
                subset[i][j] = subset[i - 1][j];
            if (j >= set[i - 1])
                subset[i][j] = subset[i - 1][j]
                               || subset[i - 1][j - set[i - 1]];
        }
    }
 
   
   for(int i=0;i<sum+1;i++)
   {
       val.push_back(subset[n][i]);
       
   }
}
};
