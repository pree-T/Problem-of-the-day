class Solution {
public:
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& has) {
        vector<vector<int>> adj(n);
        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        
       int req = dfs(adj,0,-1,has);
        return 2*req;
        
        
    }
    
    int dfs(vector<vector<int>> &adj,int node,int prev,vector<bool> &hasApple)
    {
        int tree = 0;
        for(auto &ele:adj[node]){
            if(ele!=prev){
                int subtree = dfs(adj,ele,node,hasApple);
                tree += subtree;
            }
        }
        if(adj[node].size()==1 and node!=0){
            tree += hasApple[node];
        }
        else if(node!=0){
            if(tree!=0 or hasApple[node]) tree++; 
        }
        return tree;
    }
};
